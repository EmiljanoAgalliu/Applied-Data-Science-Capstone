import pandas as pd
import dash
from dash import html
from dash import dcc
from dash.dependencies import Input, Output
import plotly.express as px
import asyncio
import aiohttp
import warnings

warnings.filterwarnings('ignore')

async def download_file(url, filepath):
    connector = aiohttp.TCPConnector(ssl=False)
    async with aiohttp.ClientSession(connector=connector) as session:
        async with session.get(url) as response:
             with open(filepath, 'wb') as file:
                file.write(await response.read())

def read_data(filepath):
    return pd.read_csv(filepath)

async def main():
    url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv"
    filepath = "spacex_launch_dash"
    await download_file(url, "spacex_launch_dash")

    spacex_df = read_data(filepath)
    pd.set_option('display.max_rows', None)
    pd.set_option('display.max_columns', None)
    print(spacex_df.head(10))

    max_payload = spacex_df['Payload Mass (kg)'].max()
    min_payload = spacex_df['Payload Mass (kg)'].min()

    launch_sites = []
    launch_sites.append({'label': 'All Sites', 'value': 'All Sites'})
    all_launch_sites = spacex_df['Launch Site'].unique().tolist()
    for launch_site in all_launch_sites:
        launch_sites.append({'label': launch_site, 'value': launch_site})

    app = dash.Dash(__name__)

    app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                            style={'textAlign': 'center', 'color': '#503D36',
                                                   'font-size': 40}),
                                    # Task 1
                                    html.Div([
                                        dcc.Dropdown(
                                            id = 'site-dropdown',
                                            options = launch_sites,
                                            placeholder = 'Select a Launch Site here',
                                            searchable = True ,
                                            clearable = False,
                                            value = 'All Sites'
                                            ),]),
                                    html.Br(),

                                    # Task 2
                                    html.Div(dcc.Graph(id='success-pie-chart')),
                                    html.Br(),

                                    html.P("Payload range (Kg):"),
                                    # Task 3
                                    html.Div([
                                        dcc.RangeSlider(
                                            id = 'payload_slider',
                                            min = 0,
                                            max = 10000,
                                            step = 1000,
                                            marks = {
                                                0: {'label': '0 Kg', 'style': {'color': '#77b0b1'}},
                                                1000: {'label': '1000 Kg'},
                                                2000: {'label': '2000 Kg'},
                                                3000: {'label': '3000 Kg'},
                                                4000: {'label': '4000 Kg'},
                                                5000: {'label': '5000 Kg'},
                                                6000: {'label': '6000 Kg'},
                                                7000: {'label': '7000 Kg'},
                                                8000: {'label': '8000 Kg'},
                                                9000: {'label': '9000 Kg'},
                                                10000: {'label': '10000 Kg', 'style': {'color': '#f50'}},
                                                },
                                                value = [min_payload,max_payload]),
                                                ]),

                                    # Task 4
                                    html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                    ])

    # Task 2:
    @app.callback(
         Output(component_id = 'success-pie-chart', component_property = 'figure'),
         [Input(component_id = 'site-dropdown', component_property = 'value')]
    )
    def update_piegraph(site_dropdown):
        if (site_dropdown == 'All Sites' or site_dropdown == 'None'):
            data  = spacex_df[spacex_df['class'] == 1]
            fig = px.pie(
                    data,
                    names = 'Launch Site',
                    title = 'Total Success Launches by All Sites',
                )
        else:
            data  = spacex_df.loc[spacex_df['Launch Site'] == site_dropdown]
            fig = px.pie(
                    data,
                    names = 'class',
                    title = 'Total Success Launches for Site &#8608; '+site_dropdown,
                )
        return fig

    # Task 4:
    @app.callback(
         Output(component_id = 'success-payload-scatter-chart', component_property = 'figure'),
         [Input(component_id = 'site-dropdown', component_property = 'value'),
         Input(component_id = "payload_slider", component_property = "value")]
    )
    def update_scattergraph(site_dropdown,payload_slider):
        if (site_dropdown == 'All Sites' or site_dropdown == 'None'):
            low, high = payload_slider
            data  = spacex_df
            inrange = (data['Payload Mass (kg)'] > low) & (data['Payload Mass (kg)'] < high)
            fig = px.scatter(
                    data[inrange],
                    x = "Payload Mass (kg)",
                    y = "class",
                    title = 'Correlation Between Payload and Success for All Sites',
                    color="Booster Version Category",
                    size='Payload Mass (kg)',
                    hover_data=['Payload Mass (kg)']
                )
        else:
            low, high = payload_slider
            data  = spacex_df.loc[spacex_df['Launch Site'] == site_dropdown]
            inrange = (data['Payload Mass (kg)'] > low) & (data['Payload Mass (kg)'] < high)
            fig = px.scatter(
                    data[inrange],
                    x = "Payload Mass (kg)",
                    y = "class",
                    title = 'Correlation Between Payload and Success for Site &#8608; '+site_dropdown,
                    color="Booster Version Category",
                    size='Payload Mass (kg)',
                    hover_data=['Payload Mass (kg)']
                )
        return fig

    if __name__ == '__main__':
        app.run_server()

asyncio.run(main())
