import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import matplotlib as mpl
import aiohttp
import asyncio
import warnings

warnings.filterwarnings('ignore')

async def download_file(url, filepath):
    connector = aiohttp.TCPConnector(ssl=False)
    async with aiohttp.ClientSession(connector=connector) as session:
        async with session.get(url) as response:
             with open(filepath, 'wb') as file:
                file.write(await response.read())

def read_data(filepath):
    return pd.read_csv(filepath)

async def main():
    url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv"
    filepath = "dataset_part_2.csv"
    await download_file(url, "dataset_part_2.csv")

    df = read_data(filepath)
    pd.set_option('display.max_rows', None)
    pd.set_option('display.max_columns', None)
    print(df.head(10))

    sns.catplot(y="PayloadMass", x="FlightNumber", hue="Class", data=df, aspect=5)
    plt.xlabel("Flight Number", fontsize=20)
    plt.ylabel("Payload Mass", fontsize=20)
    plt.show()

    # Task 1
    plt.figure(figsize=(14, 8))
    sns.scatterplot(x="FlightNumber", y="LaunchSite", hue="Class", data=df)
    plt.xlabel("Flight Number", fontsize=20)
    plt.ylabel("Launch Site", fontsize=20)
    plt.title("Relationship between Flight Number and Launch Site", fontsize=20)
    plt.show()

    # Task 2
    plt.figure(figsize=(14, 8))
    sns.scatterplot(x="PayloadMass", y="LaunchSite", hue="Class", data=df)
    plt.xlabel("Payload Mass", fontsize=20)
    plt.ylabel("Launch Site", fontsize=20)
    plt.title("Relationship between Payload and Launch Site", fontsize=20)
    plt.show()

    # Task 3
    plt.figure(figsize=(14, 8))
    palette = sns.color_palette("Set2", len(df['Orbit'].unique()))
    sns.barplot(x="Orbit", y="Class", data=df, palette=palette)
    plt.xlabel("Orbit", fontsize=20)
    plt.ylabel("Success rate", fontsize=20)
    plt.title("Success Rate by Orbit", fontsize=20)
    plt.show()

    # Task 4
    plt.figure(figsize=(14, 8))
    sns.scatterplot(data=df, x='FlightNumber', y='Orbit', hue='Class')
    plt.title('Relationship between Flight Number and Orbit Type')
    plt.xlabel('Flight Number',fontsize=20)
    plt.ylabel('Orbit Type',fontsize=20)
    plt.legend(title='Class', loc='upper right')
    plt.show()

    # Task 5
    plt.figure(figsize=(14, 8))
    sns.scatterplot(data=df, x='PayloadMass', y='Orbit', hue='Class')
    plt.title('Relationship between Payload Mass and Orbit Type')
    plt.xlabel('Payload Mass',fontsize=20)
    plt.ylabel('Orbit Type',fontsize=20)
    plt.legend(title='Class', loc='upper right')
    plt.show()

    # Task 6
    year = []
    def Extract_year():
        for i in df["Date"]:
            year.append(i.split("-")[0])
        return year

    df['Year'] = Extract_year()
    df['Year'] = df['Year'].astype(int)
    avg_success_rate_per_year = df.groupby('Year')['Class'].mean()
    avg_success_rate_per_year = avg_success_rate_per_year.sort_index()
    plt.figure(figsize=(14, 8))
    avg_success_rate_per_year.plot(kind='line', marker='o', color='b', linewidth=2)
    plt.title('Average Launch Success Rate Trend by Year')
    plt.xlabel('Year', fontsize=20)
    plt.ylabel('Average Success Rate', fontsize=20)
    plt.xticks(rotation=45)
    plt.xticks(ticks=avg_success_rate_per_year.index, labels=avg_success_rate_per_year.index, rotation=45)
    plt.grid(True)
    plt.show()

    # Task 7
    features = df[
        ['FlightNumber', 'PayloadMass', 'Orbit', 'LaunchSite', 'Flights', 'GridFins', 'Reused', 'Legs', 'LandingPad',
         'Block', 'ReusedCount', 'Serial']]
    print(features.head())

    features_one_hot = features
    features_one_hot = pd.concat([features_one_hot, pd.get_dummies(df['Orbit'])], axis=1)
    features_one_hot.drop(['Orbit'], axis=1, inplace=True)
    features_one_hot = pd.concat([features_one_hot, pd.get_dummies(df['LaunchSite'])], axis=1)
    features_one_hot.drop(['LaunchSite'], axis=1, inplace=True)
    features_one_hot = pd.concat([features_one_hot, pd.get_dummies(df['LandingPad'])], axis=1)
    features_one_hot.drop(['LandingPad'], axis=1, inplace=True)
    features_one_hot = pd.concat([features_one_hot, pd.get_dummies(df['Serial'])], axis=1)
    features_one_hot.drop(['Serial'], axis=1, inplace=True)
    features_one_hot.head()

    # Task 8
    features_one_hot = features_one_hot.astype(float)
    print(features_one_hot.head())

    # features_one_hot.to_csv('dataset_part_3.csv', index=False)

asyncio.run(main())
